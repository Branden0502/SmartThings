/* **DISCLAIMER**
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
 * 1. the software will meet your requirements or expectations;
 * 2. the software or the software content will be free of bugs, errors, viruses or other defects;
 * 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
 * 4. the software will be compatible with third party software;
 * 5. any errors in the software will be corrected.
 * The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
 */ 
 
/**
 * Foscam IP Camera
 *
 * Taken from skp19, Enhanced and bugfixed by RBoy
 * Changes Copyright RBoy, redistribution of any changes or modified code is not allowed without permission
 * Change log:
 * 2015-6-21 - Fixed issue with refresh not working
 * 2015-6-21 - Added support for mirroring/Flipping for HD cameras and support for video mirroring/flipping
 * 2015-6-19 - Added attributes ledState and ledMode to definitions
 * 2015-6-18 - Fix for tile names not being restored after pressing
 * 2015-6-17 - Added support for Motion Sensor to report motion - to be used in conjunction with the Foscam Motion Alarm Monitor since we can't poll from device code
 * 2015-6-17 - Enhanced reporting status dynamically, improved communicated reliablility, reduced verbosity of activity logs
 * 2015-6-17 - Added support for getting LED on/off status, simplified LED icons
 * 2015-6-17 - Fixed issue with HD camera's not working due to ST platform changes
 * 2015-3-28 - Fixed missing command siren and both for alarm capability, temp fix for android carousel hang, fixed issue with preset and cruisemap names breaking on android
 * 2015-2-22 - Fix for Alarm and Switch not being updated
 * 2015-2-4 - Presets show names
 * 2015-1-29 - Added options for configuring eMail, local ringer alarm, taking pictures and recording videos for motion detection
 * 2015-1-20 - Cruisemaps now show the names
 * 2015-1-20 - Added support for hostnames (public) instead of ipaddress for device
 * 2015-1-19 - Turning on the strobe function also takes a picture
 * 2015-1-19 - Support configuring motion alarm snap interval and motion sensitivity, added support for using as an Alarm and Switch/Relay Switch to enable monitoring
 *
 *  This device has the following functions:
 *    - Take a snapshot
 *    - Toggle the infrared lights
 *    - Enable/Disable motion alarm
 *    - Go to and set preset locations
 *    - Enable cruise maps
 *    - Control PTZ
 *    - Reboot
 *
 *  Capability: Image Capture, Polling, Alarm, Relay Switch, Switch, Motion Sensor, Sensor
 *  Custom Attributes: hubactionMode, alarmStatus, ledStatus, cruise1, cruise2, presetA, presetB, presetC, ledState, ledMode
 *  Custom Commands: alarmOn, alarmOff, toggleAlarm, left, right, up, down,
 *                   stop, set, preset, preset1, preset2, preset3, cruisemap1,
 *                   cruisemap2, cruise, toggleLED, ledOn, ledOff, ledAuto
 *
 */
 
metadata {
	definition (name: "Foscam IP Camera", namespace: "rboy", author: "RBoy") {
		capability "Polling"
		capability "Image Capture"
        capability "Alarm"
        capability "Relay Switch"
        capability "Switch"
        capability "Refresh"
        capability "Motion Sensor"
        capability "Sensor"
        
        attribute "alarmStatus", "string"
        attribute "ledStatus",   "string"
        attribute "ledState",   "string"
        attribute "ledMode",   "string"
        attribute "hubactionMode", "string"
        attribute "cruise1", "string"
        attribute "cruise2", "string"
        attribute "presetA", "string"
        attribute "presetB", "string"
        attribute "presetC", "string"
        attribute "mirrorStatus", "string"
        attribute "flipStatus", "string"
    
		command "alarmOn"
		command "alarmOff"
		command "toggleAlarm"
		command "toggleLED"
        
		command "ledOn"
		command "ledOff"
		command "ledAuto"
        
		command "left"
		command "right"
		command "up"
		command "down"
        
		command "cruisemap1"
		command "cruisemap2"
		command "stopCruise"
        
		command "preset1"
		command "preset2"
		command "preset3"
        
        command "reboot"
        command "checkMotionStatus"
	}
    
    preferences {
        input("ip", "string", title:"Camera IP Address/URL", description: "Camera IP Address or Hostname", required: true, displayDuringSetup: true)
        input("port", "number", title:"Camera Port", description: "Camera Port", defaultValue: "80" , required: true, displayDuringSetup: true)
        input("username", "string", title:"Camera Username (case sensitive)", description: "Camera Username (case sensitive)", required: true, displayDuringSetup: true)
        input("password", "password", title:"Camera Password (case sensitive)", description: "Camera Password (case sensitive)", required: true, displayDuringSetup: true)
        input("hdcamera", "bool", title:"Enable this if the Foscam camera is a HD model?", description: "Type of Foscam Camera", required: true, displayDuringSetup: true)
        input("mirror", "bool", title:"Mirror", description: "Mirror Image? (Horizontal)?")
        input("flip", "bool", title:"Flip", description: "Flip Image? (Vertical)?")
        input("motionLevel", "enum", title:"Motion Detect Sensitivity Level (For HD cameras only)", multiple: false, defaultValue: "Medium", options: ["Lowest","Lower","Low","Medium","High"], description: "Alarm Motion Sensitivity Level", required: true, displayDuringSetup: true)
        input("snapInterval", "enum", title:"Motion Detect Re-Arm Interval (For HD cameras only)", multiple: false, defaultValue: "15s", options: ["5s","6s","7s","8s","9s","10s","11s","12s","13s","14s","15s"], description: "Alarm Motion Snap Interval in seconds", required: true, displayDuringSetup: true)
        input("motionRing", "bool", title:"Motion Detect Sound Camera Alarm (For HD cameras only)", description: "Sound local ring alarm when motion is detected", defaultValue: true, required: true, displayDuringSetup: true)
        input("motionEMail", "bool", title:"Motion Detect send EMail (For HD cameras only)", description: "Send e-Mail when motion is detected", defaultValue: true, required: true, displayDuringSetup: true)
        input("motionSnap", "bool", title:"Motion Detect Take Picture (For HD cameras only)", description: "Take a picture when motion is detected", defaultValue: true, required: true, displayDuringSetup: true)
        input("motionRecord", "bool", title:"Motion Detect Record Video (For HD cameras only)", description: "Record a video when motion is detected", defaultValue: true, required: true, displayDuringSetup: true)
		input("preset1", "text", title: "Preset 1 (For HD cameras only)", description: "Name of your first preset position", defaultValue: "")
		input("preset2", "text", title: "Preset 2 (For HD cameras only)", description: "Name of your second preset position", defaultValue: "")
		input("preset3", "text", title: "Preset 3 (For HD cameras only)", description: "Name of your third preset position", defaultValue: "")
		input("cruisename1", "text", title: "Cruise Map 1 (For HD cameras only. Non-HD cameras will default to Horizontal.)", description: "Name of your first cruise map", defaultValue: "Horizontal")
		input("cruisename2", "text", title: "Cruise Map 2 (For HD cameras only. Non-HD cameras will default to Vertical.)", description: "Name of your second cruise map", defaultValue: "Vertical")
	}

	tiles {
        carouselTile("cameraDetails", "device.image", width: 3, height: 2) { }

		standardTile("take", "device.image", width: 1, height: 1, canChangeIcon: false, inactiveLabel: true, canChangeBackground: false) {
			state "take", label: "Take", action: "Image Capture.take", icon: "st.camera.camera", backgroundColor: "#FFFFFF", nextState:"taking"
			state "taking", label:'Taking', action: "", icon: "st.camera.take-photo", backgroundColor: "#53a7c0"
			state "image", label: "Take", action: "Image Capture.take", icon: "st.camera.camera", backgroundColor: "#FFFFFF", nextState:"taking"
		}

        standardTile("alarmStatus", "device.alarmStatus", width: 1, height: 1, canChangeIcon: true, inactiveLabel: true, canChangeBackground: true) {
          state "off", label: "Off", action: "toggleAlarm", icon: "st.Lighting.light15", backgroundColor: "#FFFFFF", nextState:"on"
          state "on", label: "On", action: "toggleAlarm", icon: "st.Lighting.light15",  backgroundColor: "#79b821", nextState:"off"
          state "alarm", label: "Intruder", action: "toggleAlarm", icon: "st.Lighting.light15",  backgroundColor: "#ff3333", nextState:"off"
        }
        
        standardTile("ledState", "device.ledStatus", width: 1, height: 1, canChangeIcon: false, inactiveLabel: true, canChangeBackground: false) {
          state "autoOn", label: "Auto", action: "ledOn", icon: "st.lights.multi-light-bulb-on", backgroundColor: "#79b821", nextState:"..."
          state "autoOff", label: "Auto", action: "ledOn", icon: "st.lights.multi-light-bulb-on", backgroundColor: "#53a7c0", nextState:"..."
          state "on", label: "On", action: "ledOff", icon: "st.lights.multi-light-bulb-off", backgroundColor: "#79b821", nextState:"..."
          state "off", label: "Off", action: "ledAuto", icon: "st.lights.multi-light-bulb-off", backgroundColor: "#FFFFFF", nextState:"..."
          state "...", label: "...", action:"", nextState:"..."
        }

		standardTile("preset1", "device.presetA", width: 1, height: 1, canChangeIcon: false, canChangeBackground: false, decoration: "flat") {
			state "preset1", label: '${currentValue}', action: "preset1", icon: ""
		}

		standardTile("preset2", "device.presetB", width: 1, height: 1, canChangeIcon: false, canChangeBackground: false, decoration: "flat") {
			state "preset2", label: '${currentValue}', action: "preset2", icon: ""
		}

		standardTile("preset3", "device.presetC", width: 1, height: 1, canChangeIcon: false, canChangeBackground: false, decoration: "flat") {
			state "preset3", label: '${currentValue}', action: "preset3", icon: ""
		}
        
		standardTile("cruisemap1", "device.cruise1", width: 1, height: 1, canChangeIcon: false, canChangeBackground: false, decoration: "flat") {
			state "cruisemap1", label: '${currentValue}', action: "cruisemap1", icon: ""
		}

		standardTile("cruisemap2", "device.cruise2", width: 1, height: 1, canChangeIcon: false, canChangeBackground: false, decoration: "flat") {
			state "cruisemap2", label: '${currentValue}', action: "cruisemap2", icon: ""
		}
 
 		standardTile("stopcruise", "device.image", width: 1, height: 1, canChangeIcon: false, canChangeBackground: false, decoration: "flat") {
			state "stopcruise", label: "Stop Cruise", action: "stopCruise", icon: ""
		}

		standardTile("left", "device.image", width: 1, height: 1, canChangeIcon: false,  canChangeBackground: false, decoration: "flat") {
			state "left", label: "left", action: "left", icon: "st.thermostat.thermostat-left"
		}

		standardTile("right", "device.image", width: 1, height: 1, canChangeIcon: false,  canChangeBackground: false, decoration: "flat") {
			state "right", label: "right", action: "right", icon: "st.thermostat.thermostat-right"
		}

		standardTile("up", "device.image", width: 1, height: 1, canChangeIcon: false, canChangeBackground: false, decoration: "flat") {
			state "up", label: "up", action: "up", icon: "st.thermostat.thermostat-up"
		}

		standardTile("down", "device.image", width: 1, height: 1, canChangeIcon: false, canChangeBackground: false, decoration: "flat") {
			state "down", label: "down", action: "down", icon: "st.thermostat.thermostat-down"
		}

		standardTile("stop", "device.image", width: 1, height: 1, canChangeIcon: false,  canChangeBackground: false, decoration: "flat") {
			state "stop", label: "", action: "stopCruise", icon: "st.sonos.stop-btn"
		}

        standardTile("refresh", "device.status", inactiveLabel: false, decoration: "flat") {
        	state "refresh", action:"refresh.refresh", icon:"st.secondary.refresh"
        }
        
        standardTile("blank", "device.image", width: 1, height: 1, canChangeIcon: false,  canChangeBackground: false, decoration: "flat") {
        	state "blank", label: "", action: "", icon: "", backgroundColor: "#FFFFFF"
        }
        
        standardTile("reboot", "device.image", inactiveLabel: false, decoration: "flat") {
      		state "reboot", label: "reboot", action: "reboot", icon: "st.quirky.spotter.quirky-spotter-plugged"
    	}

        main "alarmStatus"
			details(["take", "blank", "alarmStatus", "cameraDetails", "ledState", "reboot", "refresh", "preset1", "preset2", "preset3", "cruisemap1", "cruisemap2", "stopcruise", "blank", "up", "blank", "left", "stop", "right", "blank", "down", "blank"])
	}
}

groovy.json.JsonSlurper

//TAKE PICTURE
def take() {
	log.debug("Taking Photo")
	sendEvent(name: "hubactionMode", value: "s3");
    if(hdcamera) {
		hubGet("cmd=snapPicture2")
    }
    else {
    	hubGet("/snapshot.cgi?")
    }
}
//END TAKE PICTURE

//SWITCH ACTIONS
def on() {
	log.debug "On requested, enabling monitoring"
    alarmOn()
}

def off() {
	log.debug "Off requested, disabling monitoring"
    alarmOff()
}
//END SWITCH ACTIONS

//ALARM ACTIONS
def both() {
	log.debug "Alarm both requested, enabling monitoring and taking picture"
    take()
    alarmOn()
}

def siren() {
	log.debug "Alarm siren requested, enabling monitoring and taking picture"
    take()
    alarmOn()
}

def strobe() {
	log.debug "Alarm strobe requested, enabling monitoring and taking picture"
    take()
    alarmOn()
}

def toggleAlarm() {
	log.debug "Toggling Alarm"
	if(device.currentValue("alarmStatus") == "off") {
    	alarmOn()
  	}
	else {
    	alarmOff()
	}
}

def alarmOn() {
	log.debug "Enabling Alarm"

	if(hdcamera) {
		delayBetween([hubGet("cmd=setMotionDetectConfig&isEnable=1&snapInterval=1&sensitivity=${getMotionLevel(motionLevel)}&linkage=${getMotionAlarmEvents()}&triggerInterval=${getSnapInterval(snapInterval)}&schedule0=281474976710655&schedule1=281474976710655&schedule2=281474976710655&schedule3=281474976710655&schedule4=281474976710655&schedule5=281474976710655&schedule6=281474976710655&area0=1023&area1=1023&area2=1023&area3=1023&area4=1023&area5=1023&area6=1023&area7=1023&area8=1023&area9=1023&1421696056773"), poll()])
    }
    else {
    	delayBetween([hubGet("/set_alarm.cgi?motion_armed=1&"), poll()])
    }
}

def alarmOff() {
	log.debug "Disabling Alarm"

    if(hdcamera) {
		delayBetween([hubGet("cmd=setMotionDetectConfig&isEnable=0"), poll()])
    }
    else {
    	delayBetween([hubGet("/set_alarm.cgi?motion_armed=0&"), poll()])
    }
    
}
//END ALARM ACTIONS

//LED ACTIONS
//Toggle LED's
def toggleLED() {
  log.debug("Toggle LED")

  if((device.currentValue("ledStatus") == "autoOn") || (device.currentValue("ledStatus") == "autoOff")) {
    ledOn()
  }

  else if(device.currentValue("ledStatus") == "on") {
    ledOff()
  }
  
  else {
    ledAuto()
  }
}

def ledOn() {
    log.debug("LED changed to: on")
    if(hdcamera) {
	    delayBetween([hubGet("cmd=setInfraLedConfig&mode=1"), hubGet("cmd=openInfraLed"), poll()])
    }
    else {
    	delayBetween([hubGet("/decoder_control.cgi?command=95&"), poll()])
    }
}

def ledOff() {
    log.debug("LED changed to: off")
    if(hdcamera) {
    	delayBetween([hubGet("cmd=setInfraLedConfig&mode=1"), hubGet("cmd=closeInfraLed"), poll()])
    }
    else {
    	delayBetween([hubGet("/decoder_control.cgi?command=94&"), poll()])
    }
}

def ledAuto() {
    log.debug("LED changed to: auto")
	if(hdcamera) {
		delayBetween([hubGet("cmd=setInfraLedConfig&mode=0"), poll()])
    }
    else {
    	delayBetween([hubGet("/decoder_control.cgi?command=95&"), poll()])
    }
}
//END LED ACTIONS

//PRESET ACTIONS
def preset1() {
	log.debug("Preset 1 Selected - ${preset1}")
	if(hdcamera) {
		delayBetween([hubGet("cmd=ptzGotoPresetPoint&name=${preset1}"), poll()])
    }
    else {
    	delayBetween([hubGet("/decoder_control.cgi?command=31&"), poll()])
    }
}

def preset2() {
	log.debug("Preset 2 Selected - ${preset2}")
	if(hdcamera) {
		delayBetween([hubGet("cmd=ptzGotoPresetPoint&name=${preset2}"), poll()])
    }
    else {
    	delayBetween([hubGet("/decoder_control.cgi?command=33&"), poll()])
    }
}

def preset3() {
	log.debug("Preset 3 Selected - ${preset3}")
	if(hdcamera) {
		delayBetween([hubGet("cmd=ptzGotoPresetPoint&name=${preset3}"), poll()])
    }
    else {
    	delayBetween([hubGet("/decoder_control.cgi?command=35&"), poll()])
    }
}
//END PRESET ACTIONS

//CRUISE ACTIONS
def cruisemap1() {
	log.debug("Cruise Map 1 Selected - ${cruisename1}")
	if(hdcamera) {
		delayBetween([hubGet("cmd=ptzStartCruise&mapName=${cruisename1}"), poll()])
    }
    else {
    	delayBetween([hubGet("/decoder_control.cgi?command=28&"), poll()])
    }
}

def cruisemap2() {
	log.debug("Cruise Map 2 Selected - ${cruisename2}")
	if(hdcamera) {
		delayBetween([hubGet("cmd=ptzStartCruise&mapName=${cruisename2}"), poll()])
    }
    else {
    	delayBetween([hubGet("/decoder_control.cgi?command=26&"), poll()])
    }
}

def stopCruise() {
	log.debug("Stop Cruise")
	if(hdcamera) {
		hubGet("cmd=ptzStopRun")
    }
    else {
    	delayBetween([hubGet("/decoder_control.cgi?command=29&"), hubGet("/decoder_control.cgi?command=27&")])
    }
}
//END CRUISE ACTIONS

//PTZ CONTROLS
def left() {
	if(hdcamera) {
    	if(mirror) {
			delayBetween([hubGet("cmd=ptzMoveRight"), hubGet("cmd=ptzStopRun")])
        }
        else {
			delayBetween([hubGet("cmd=ptzMoveLeft"), hubGet("cmd=ptzStopRun")])
        }
    }
    else {
    	if(mirror) {
	    	hubGet("/decoder_control.cgi?command=4&onestep=1&")
        }
        else {
        	hubGet("/decoder_control.cgi?command=6&onestep=1&")
        }
    }
}

def right() {
	if(hdcamera) {
    	if(mirror) {
			delayBetween([hubGet("cmd=ptzMoveLeft"), hubGet("cmd=ptzStopRun")])
        }
        else {
			delayBetween([hubGet("cmd=ptzMoveRight"), hubGet("cmd=ptzStopRun")])
        }
    }
    else {
    	if(mirror) {
	    	hubGet("/decoder_control.cgi?command=6&onestep=1&")
        }
        else {
        	hubGet("/decoder_control.cgi?command=4&onestep=1&")
        }
    }
}

def up() {
	if(hdcamera) {
    	if(flip) {
	        delayBetween([hubGet("cmd=ptzMoveDown"), hubGet("cmd=ptzStopRun")])
        }
        else {
	        delayBetween([hubGet("cmd=ptzMoveUp"), hubGet("cmd=ptzStopRun")])
        }
    }
    else {
    	if(flip) {
	    	hubGet("/decoder_control.cgi?command=2&onestep=1&")
        }
        else {
        	hubGet("/decoder_control.cgi?command=0&onestep=1&")
        }
    }
}

def down() {
	if(hdcamera) {
    	if(flip) {
	        delayBetween([hubGet("cmd=ptzMoveUp"), hubGet("cmd=ptzStopRun")])
        }
        else {
	        delayBetween([hubGet("cmd=ptzMoveDown"), hubGet("cmd=ptzStopRun")])
        }
    }
    else {
    	if(flip) {
    		hubGet("/decoder_control.cgi?command=0&onestep=1&")
        }
        else {
        	hubGet("/decoder_control.cgi?command=2&onestep=1&")
        }
    }
}
//END PTZ CONTROLS

//REBOOT
def reboot() {
	if(hdcamera) {
		hubGet("cmd=rebootSystem")
    }
    else {
    	hubGet("/reboot.cgi?&" + $getLogin())
    }
}
//END REBOOT

def refresh() {
	log.debug "Refresh called. Settings -> $settings"
	poll()
}

def poll() {
	log.trace "Poll called"
    
	//Update the tiles names
    sendEvent(name: "cruise1", value: "${(cruisename1 == null ) ? "" : cruisename1} Cruise", isStateChange: true)
    sendEvent(name: "cruise2", value: "${(cruisename2 == null ) ? "" : cruisename2} Cruise", isStateChange: true)
    sendEvent(name: "presetA", value: "Preset ${(preset1 == null ) ? "" : preset1}", isStateChange: true)
    sendEvent(name: "presetB", value: "Preset ${(preset2 == null ) ? "" : preset2}", isStateChange: true)
    sendEvent(name: "presetC", value: "Preset ${(preset3 == null ) ? "" : preset3}", isStateChange: true)

    //Poll Motion Alarm Status and IR LED Mode and device status
    if (hdcamera) {
    	def cmds = [] // we can only have one delayBetween, put them all together in the right order
        
        // Get the device, LED and Mirror status first
        cmds << hubGet("cmd=getDevState")
        cmds << hubGet("cmd=getInfraLedConfig")
        cmds << hubGet("cmd=getMirrorAndFlipSetting")
        // cmds << hubGet("cmd=getMotionDetectConfig") // not required for now, we have everything we need

		// Enable/Disable Mirror
        if (mirror && (device.currentValue("mirrorStatus") != "1")) {
            log.debug "Enabling video mirroring"
            cmds << hubGet("cmd=mirrorVideo&isMirror=1")
            cmds << hubGet("cmd=getMirrorAndFlipSetting")
        }
        else if (!mirror && (device.currentValue("mirrorStatus") != "0")) {
            log.debug "Disabling video mirroring"
            cmds << hubGet("cmd=mirrorVideo&isMirror=0")
            cmds << hubGet("cmd=getMirrorAndFlipSetting")
        }

		// Enable/Disable Flip
        if (flip && (device.currentValue("flipStatus") != "1")) {
            log.debug "Enabling video flipping"
            cmds << hubGet("cmd=flipVideo&isFlip=1")
            cmds << hubGet("cmd=getMirrorAndFlipSetting")
        }
        else if (!flip && (device.currentValue("flipStatus") != "0")) {
            log.debug "Disabling video flipping"
            cmds << hubGet("cmd=flipVideo&isFlip=0")
            cmds << hubGet("cmd=getMirrorAndFlipSetting")
        }

		//log.trace "Executing -> ${cmds.inspect()}"
		delayBetween(cmds)
	}
    else {
    	hubGet("/get_params.cgi?")
    }
    
}

private getLogin() {
	if(hdcamera) {
    	return "usr=${username}&pwd=${password}&"
    }
    else {
    	return "user=${username}&pwd=${password}"
    }
}

private hubGet(def apiCommand) {
	// Check if we have a hostname and if so convert to IP Address
    if (!isIPAddress(ip)) {
        //log.trace("Converting hostname $ip to IP Address before continuing")
        state.ipAddress = convertHostnameToIPAddress(ip)
        //log.trace("Got IPAddress=${state.ipAddress} for hostname=$ip")
    }
    else {
        state.ipAddress = ip
    }
    
	//Setting Network Device Id
    def iphex = convertIPtoHex(state.ipAddress)
    def porthex = convertPortToHex(port)
    device.deviceNetworkId = "$iphex:$porthex"
    //log.trace "Device Network Id set to ${iphex}:${porthex}"

	log.trace("Executing hubaction on " + getHostAddress())

    def uri = ""
    if (hdcamera) {
    	uri = "/cgi-bin/CGIProxy.fcgi?" + getLogin() + apiCommand
	}
    else {
    	uri = apiCommand + getLogin()
    }
    
    log.trace "http://${getHostAddress()}$uri"
    
    def hubAction = new physicalgraph.device.HubAction(
    	method: "GET",
        path: uri,
        headers: [HOST:getHostAddress()]
    )
    if (device.currentValue("hubactionMode") == "s3") {
        hubAction.options = [outputMsgToS3:true]
        sendEvent(name: "hubactionMode", value: "local");
    }
	hubAction
}

//Parse events into attributes
def parse(String description) {
	log.debug "Parse called"
    
    def map = [:]
    def retResult = []
    def descMap = parseDescriptionAsMap(description)
    //log.trace "${descMap.inspect()}"
    
    //Image
	if (descMap["bucket"] && descMap["key"]) {
    	log.info "Saving image to S3 store"
		putImageInS3(descMap)
	}

	//Status Polling
    else if (descMap["headers"] && descMap["body"]) {
        def body = new String(descMap["body"].decodeBase64())
	    //log.trace "Body -> ${body}"

		if(hdcamera) {
            def statusVars = new XmlSlurper().parseText(body)
            //log.trace "Vars -> ${statusVars}"
            
            def motionAlarm = "$statusVars.motionDetectAlarm" // $statusVars.isEnable is used with getMotionDetectConfig
            def ledM = "$statusVars.mode"
            def ledS = "$statusVars.infraLedState"
            def flipS = "$statusVars.isFlip"
            def mirrorS = "$statusVars.isMirror"

			// Get mirror and flip settings
            if (mirrorS?.trim() != "") {
            	log.info "Polled: Mirror status $mirrorS"
            	sendEvent(name: "mirrorStatus", value: mirrorS);
            }
            if (flipS?.trim() != "") {
            	log.info "Polled: Flip status $flipS"
            	sendEvent(name: "flipStatus", value: flipS);
            }
            
            //Get Motion Alarm Status
            if(motionAlarm == "0") {
                log.info("Polled: Motion Alarm Off")
                sendEvent(name: "alarmStatus", value: "off");
                sendEvent(name: "alarm", value: "off");
                sendEvent(name: "switch", value: "off");
                sendEvent(name: "motion", value: "inactive", descriptionText: "$device.displayName motion stopped")
            }
            else if(motionAlarm == "1") {
                log.info("Polled: Motion Alarm On")
                sendEvent(name: "alarmStatus", value: "on");
                sendEvent(name: "alarm", value: "both");
                sendEvent(name: "switch", value: "on");
                sendEvent(name: "motion", value: "inactive", descriptionText: "$device.displayName motion stopped")
            }
            else if(motionAlarm == "2") {
                log.info("Polled: Motion Alarm Alert!!")
                sendEvent(name: "alarmStatus", value: "alarm");
                sendEvent(name: "alarm", value: "both");
                sendEvent(name: "switch", value: "on");
                sendEvent(name: "motion", value: "active", descriptionText: "$device.displayName detected motion")
            }

            //Get IR LED Mode
            if(ledM == "0") {
                log.info("Polled: LED Mode Auto")
                sendEvent(name: "ledMode", value: "auto", displayed: false) // this is an internal variable to track the LED mode
            }
            else if(ledM == "1") {
                log.info("Polled: LED Mode Manual")
                sendEvent(name: "ledMode", value: "manual", displayed: false) // this is an internal variable to track the LED mode
            }
            
            //Get IR LED Status
            if(ledS == "1") {
                log.info("Polled: LED On")
                sendEvent(name: "ledState", value: "on", displayed: false) // this is an internal variable to track the LED state
            }
            else if(ledS == "0") {
                log.info("Polled: LED Off")
                sendEvent(name: "ledState", value: "off", displayed: false) // this is an internal variable to track the LED state
            }
            
            //Update LED Status
            if (device.currentValue("ledState") == "on") {
                if (device.currentValue("ledMode") == "auto") {
                    sendEvent(name: "ledStatus", value: "autoOn")
                    sendEvent(name: "ledState", value: "reset", displayed: false) // Reset it and don't show it
                    sendEvent(name: "ledMode", value: "reset", displayed: false) // Reset it and don't show it
                }
                else if (device.currentValue("ledMode") == "manual") {
                    sendEvent(name: "ledStatus", value: "on")
                    sendEvent(name: "ledState", value: "reset", displayed: false) // Reset it and don't show it
                    sendEvent(name: "ledMode", value: "reset", displayed: false) // Reset it and don't show it
                }
            }
            else if (device.currentValue("ledState") == "off") {
                if (device.currentValue("ledMode") == "auto") {
                    sendEvent(name: "ledStatus", value: "autoOff")
                    sendEvent(name: "ledState", value: "reset", displayed: false) // Reset it and don't show it
                    sendEvent(name: "ledMode", value: "reset", displayed: false) // Reset it and don't show it
                }
                else if (device.currentValue("ledMode") == "manual") {
                    sendEvent(name: "ledStatus", value: "off")
                    sendEvent(name: "ledState", value: "reset", displayed: false) // Reset it and don't show it
                    sendEvent(name: "ledMode", value: "reset", displayed: false) // Reset it and don't show it
                }
			}
    	}
        else {
        	if(body.find("alarm_motion_armed=0")) {
                log.info("Polled: Motion Alarm Off")
                sendEvent(name: "alarmStatus", value: "off");
                sendEvent(name: "alarm", value: "off");
                sendEvent(name: "switch", value: "off");
                sendEvent(name: "motion", value: "inactive", descriptionText: "$device.displayName motion stopped")
            }
        	else if(body.find("alarm_motion_armed=1")) {
                log.info("Polled: Motion Alarm On")
                sendEvent(name: "alarmStatus", value: "on");
                sendEvent(name: "alarm", value: "both");
                sendEvent(name: "switch", value: "on");
                sendEvent(name: "motion", value: "inactive", descriptionText: "$device.displayName motion stopped")
            }
            else if(body.find("alarm_motion_armed=2")) {
                log.info("Polled: Motion Alarm Alert!!")
                sendEvent(name: "alarmStatus", value: "alarm");
                sendEvent(name: "alarm", value: "both");
                sendEvent(name: "switch", value: "on");
                sendEvent(name: "motion", value: "active", descriptionText: "$device.displayName detected motion")
            }

            //The API does not provide a way to poll for LED status on 8xxx series at the moment
        }
	}
}

def parseDescriptionAsMap(description) {
	description.split(",").inject([:]) { map, param ->
		def nameAndValue = param.split(":")
		map += [(nameAndValue[0].trim()):nameAndValue[1].trim()]
	}
}

def putImageInS3(map) {

	def s3ObjectContent

	try {
		def imageBytes = getS3Object(map.bucket, map.key + ".jpg")

		if(imageBytes)
		{
			s3ObjectContent = imageBytes.getObjectContent()
			def bytes = new ByteArrayInputStream(s3ObjectContent.bytes)
			storeImage(getPictureName(), bytes)
		}
	}
	catch(Exception e) {
		log.error e
	}
	finally {
		//Explicitly close the stream
		if (s3ObjectContent) { s3ObjectContent.close() }
	}
}

def checkMotionStatus() {
	log.info "Checking motion alarm status"

	//Poll Motion Alarm Status
    if (hdcamera) {
        hubGet("cmd=getDevState")
    }
    else {
        hubGet("/get_params.cgi?")
    }
}

private getPictureName() {
  def pictureUuid = java.util.UUID.randomUUID().toString().replaceAll('-', '')
  "image" + "_$pictureUuid" + ".jpg"
}

private getHostAddress() {
	return "${state.ipAddress}:${port}"
}

private String convertIPtoHex(ipAddress) {   // thanks to @pstuart
    String hex = ipAddress.tokenize( '.' ).collect {  String.format( '%02x', it.toInteger() ) }.join()
    return hex

}

private String convertPortToHex(port) {  // thanks to @pstuart
	String hexport = port.toString().format( '%04x', port.toInteger() )
    return hexport
}

private String getMotionLevel(motion) {
	log.debug("Motion Level is $motion")

	String retVal = ""
    
    switch (motion) {
    	case "Lowest":
        	retVal = "4"
            break;
            
    	case "Lower":
        	retVal = "3"
            break;
            
    	case "Low":
        	retVal = "0"
            break;
            
    	case "Medium":
        	retVal = "1"
            break;
            
    	case "High":
        	retVal = "2"
            break;
            
		default:
        	retVal = "1"
            break;
    }
    
    log.debug("Motion value is $retVal")
    
    return retVal
}

private String getSnapInterval(interval) {
	log.debug("Snap internal is $interval")

	String[][] intervals = [
    							["5s","0"],
                                ["6s","1"], 
                                ["7s","2"], 
                                ["8s","3"], 
                                ["9s","4"], 
                                ["10s","5"], 
                                ["11s","6"], 
                                ["12s","7"], 
                                ["13s","8"], 
                                ["14s","9"], 
                                ["15s","10"]
			    		    ]

	String retVal = ""
    
    switch (interval) {
    	case "5s":
        	retVal = "0"
            break;
            
    	case "6s":
        	retVal = "1"
            break;
            
    	case "7s":
        	retVal = "2"
            break;
            
    	case "8s":
        	retVal = "3"
            break;
            
    	case "9":
        	retVal = "4"
            break;
            
    	case "10s":
        	retVal = "5"
            break;
            
    	case "11s":
        	retVal = "6"
            break;
            
    	case "12s":
        	retVal = "7"
            break;
            
    	case "13s":
        	retVal = "8"
            break;
            
    	case "14s":
        	retVal = "9"
            break;
            
    	case "15s":
        	retVal = "10"
            break;
            
		default:
        	retVal = "10"
            break;
    }

	log.debug("Snap interval value is $retVal")
    
    return retVal
}

private String getMotionAlarmEvents() {
	int ret = 0 // Default nothing to enable
    
    if (motionRing) {
    	ret |= 0x1 // Enable local ringer
	    log.debug "Enabled motion ringer, $ret"
    }
    
    if (motionEMail) {
    	ret |= 0x2 // Enable sending eMails
	    log.debug "Enabled motion eMail, $ret"
    }
    
    if (motionSnap) {
    	ret |= 0x4 // Enable taking pictures
	    log.debug "Enabled motion snap pictures, $ret"
    }
    
    if (motionRecord) {
    	ret |= 0x8 // Enabling taking a video recording
	    log.debug "Enabled motion video recording, $ret"
    }
    
    log.debug "Motion alarm config value $ret"

    return ret.toString()
}

private boolean isIPAddress(String ipAddress)
{
    try
    {
         String[] parts = ipAddress.split("\\.")
         if (parts.length != 4) {
         	return false
         }
         for (int i = 0; i < 4; ++i)
         {
             int p = Integer.parseInt(parts[i])
             if (p > 255 || p < 0) {
             	return false
             }
         }
         return true;
    } catch (Exception e)
    {
        return false;
    }
}

private String convertHostnameToIPAddress(hostname) {
	def params = [
      uri: "http://api.myiponline.net/dig?url=" + hostname // thanks @cosmicpuppy
    ]

	def retVal = null
    
	try {
    	retVal = httpGet(params) { response ->
			log.trace "Request was successful, data=$response.data, status=$response.status"
            for(result in response.data) {
	            for(subresult in result) {
                    if (subresult.type == "A") {
                        //log.trace("Hostname $subresult.host has IP Address $subresult.ip")
                        return subresult.ip
                    }
                }
            }
        }
    }
    catch (Exception e) {
    	log.debug("Unable to convert hostname to IP Address, Error: $e")
    }
    
    return retVal
}