/* **DISCLAIMER**
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
 * 1. the software will meet your requirements or expectations;
 * 2. the software or the software content will be free of bugs, errors, viruses or other defects;
 * 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
 * 4. the software will be compatible with third party software;
 * 5. any errors in the software will be corrected.
 * The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
 */ 
 
/**
 *  Foscam Motion Alarm Monitor
 *
 *  Author: RBoy
 *  Copyright RBoy, redistribution of any changes or modified code is not allowed without permission
 *	2015-6-19 - Added support for taking pictures
 *  2015-6-18 - Initial version
 */

definition(
    name: "Foscam Motion Alarm Monitor",
    namespace: "RBoy",
    author: "RBoy",
    description: "Forces the foscam device to check if the motion sensor alarm has been set off",
    category: "Safety & Security",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/SafetyAndSecurity/App-IsItSafe.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/SafetyAndSecurity/App-IsItSafe@2x.png"
    )
    
preferences {
    section("About") {
        paragraph "This smart app is used in conjunction with a Foscam device type to force the device type to check if the Foscam camera(s) (HD and non-HD) has a motion alarm that has been set off."
        paragraph "The motion alerts only works when the MOTION DETECTION feature on the Foscam Camera Device is active. When the Motion Detection feature on the device is disabled, this app is dormant and will not check for any motion alerts."
    }

    section("Foscam Alarm Monitor Settings") {
        input "cameras", "capability.imageCapture", title:"Select Foscam Camera to Monitor", multiple:true, required:true
        input "interval", "number", title:"Set monitor interval (in seconds)", defaultValue:5
    }

    section("Alarm Action Settings (optional)") {
        input "sms", "phone", title: "Send SMS Notification to", required: false
        input "push", "bool", title: "Send Push Notification", required: false
        input "alarms", "capability.alarm", title: "Select Alarm to turn on if motion is detected", multiple: true, required: false
        input "alarmSilent", "bool", title: "Silent Alarm", required: false
        input "lights", "capability.switch", title: "Select lights/switches to turn on if motion is detected", multiple: true, required: false
        input "picture", "bool", title: "Take picture if motion is detected", required: false
    }
}

def installed() {
	log.debug "installed called"
    initialize()
}

def updated() {
	log.debug "updated called"
    unsubscribe()
    unschedule()
    initialize()
}

def startMonitor(event) {
	log.debug "startMonitor called, starting status updated for camera ${event.displayName}"
	
	if (!state.cameraList.contains(event.device.id)) {
        state.cameraList.add(event.device.id) // add camera to be monitored
        log.debug "Adding camera ${event.device.id} to monitor camera list ${state.cameraList}"
    }
    else
    	log.debug "Camera ${event.device} is already in the monitored list"
        
	log.trace "Calling monitorTask"
    monitorTask()
}

def stopMonitor(event) {
	log.debug "stopMonitor called, stopping status updates for camera ${event.displayName}"

    state.cameraList.remove(event.device.id) // remove camera to stop monitoring
    log.debug "Removing camera ${event.device.id} from monitor camera list ${state.cameraList}"

    if (state.cameraList.size() == 0) {
        log.trace "Stopping monitorTask since there are no cameras to be monitored"
        unschedule()
    }
}

def monitorTask() {
    //log.debug "Monitor task called"

	cameras.each { camera ->
    	if (state.cameraList.contains(camera.id)) {
    		log.debug "Checking camera $camera for active Motion Alarms"
    		camera.checkMotionStatus()
        }
    }
    
    if (state.cameraList.size() > 0) {
        //log.trace "ReScheduling monitorTask to run in ${interval} seconds"
        runIn(interval, monitorTask)
    }
}

def motionDetected(event) {
	log.debug "Motion detected in camera ${event.displayName}"
    
    // turn on the alarms
    log.debug "Turning on alarms $alarms, silent: $alarmSilent"
    alarmSilent ? alarms?.strobe() : alarms?.both()
    
    // turn on lights
    log.debug "Turning on lights $lights"
    lights?.on()
    
    // take picture
    if (picture) {
        log.debug "Taking a picture with camera $event.displayName"
        cameras.find { event.deviceId == it.id }.take()
    }
    
    // Send notifications
    log.debug "SMS: $sms, Push: $push"
    def message = "${event.displayName} has detected motion"
    sms ? sendSms(sms, message) : ""
    push ? sendPush(message) : ""    
}

private def initialize() {
    log.debug "initialize with settings: ${settings}"

	state.cameraList = [] // Reset the list

	subscribe(cameras, "alarmStatus.on", startMonitor)
    subscribe(cameras, "alarmStatus.off", stopMonitor)
    subscribe(cameras, "motion.active", motionDetected)
    
    // Check if any of the camera's have their alarmStatus as not off (on or alarm), if so then add them to the list and start the monitoring
    for (camera in cameras) {
    	log.debug "Camera $camera current motion monitoring status is ${camera.currentValue("alarmStatus")}"
    	if (camera.currentValue("alarmStatus") != "off") {
        	log.debug "Adding camera $camera.id to the monitor camera list ${state.cameraList}"
		    state.cameraList.add(camera.id) // add camera to be monitored
        }
    }
    
    if (state.cameraList.size() > 0) { // If we have any camera's in the list start the monitorTask
    	log.debug "Found active cameras in the monitor list, starting monitor task"
        runIn(interval, monitorTask)
    }
}